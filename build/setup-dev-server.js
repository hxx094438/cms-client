const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const chokidar = require('chokidar')
const clientConfig = require('./webpack.client.conf')
const serverConfig = require('./webpack.server.conf')
const webpackDevMiddleware = require('./dev-policy/dev-middleware')
const webpackHotMiddleware = require('./dev-policy/hot-middleware')


module.exports = function setupDevServer(app, templatePath, cb) {
  let bundle
  let template
  let clientManifest
  let ready
  const readyPromise = new Promise(r => {
    ready = r    //把resolve赋值给ready，在update函数中调用
  })

  const update = () => {
    console.log('update', typeof bundle)
    if (bundle && clientManifest) {
      console.log('update调用', typeof bundle, typeof clientManifest)
      ready()
      cb(bundle, {
        template,
        clientManifest
      })
    }
  }

  

  // read template from disk and watch
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
  })

  // modify client config to work with hot middleware
  const readFile = (fs, file) => {
    try {
      return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    } catch (e) {
    }
  }

  console.log('clientConfig.entry.app', clientConfig.entry)
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // dev middleware
  // 客户端编译
  const clientCompiler = webpack(clientConfig)
  // 开发模式中间件

  // webpack-dev-middleware适用于express，会导致报错next is not function,因此使用koa版
  // const devMiddleware = require('koa-webpack-dev-middleware')(clientCompiler, {
  //   publicPath: clientConfig.output.publicPath,
  //   noInfo: true
  // })

  const devMiddleware = webpackDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,    //  绑定中间件的公共路径,使用与webpack相同
    stats: {        //  用于形成统计信息的选项
      colors: true,
      chunks: false
    },
    noInfo: true, // 显示无信息到控制台（仅警告和错误）
    // serverSideRender: false //  关闭服务器端渲染模式。有关详细信息，请参阅服务器端渲染部分
  })

  app.use(devMiddleware)

  // 监听客户端webpack打包完成钩子
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error('stats.errors:', err))
    stats.warnings.forEach(err => console.warn('stats.warnings', err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    update()
  })

  // hot middleware

  // app.use(webpackHotMiddleware(clientCompiler))
  app.use(require('koa-webpack-hot-middleware')(clientCompiler))
  // watch and update server renderer
  console.log('setup服务端打包')

  const serverCompiler = webpack(serverConfig)
  // 缓存
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs   // 输出至缓存
  serverCompiler.watch({}, (err, stats) => {
    console.log('serverCompiler wathcn')
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return
    // read bundle generated by vue-ssr-webpack-plugin
    // const bundlePath = path.join(
    //   clientConfig.output.path,
    //   'vue-ssr-server-bundle.json'
    // )
    // console.log('bundlePath', bundlePath)
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })
  return readyPromise
}
